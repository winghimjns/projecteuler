/**
 * Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 * 
 * 22=4, 23=8, 24=16, 25=32
 * 32=9, 33=27, 34=81, 35=243
 * 42=16, 43=64, 44=256, 45=1024
 * 52=25, 53=125, 54=625, 55=3125
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 * 
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * 
 * How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 * 
 */

// ================================================================================
//   CONSTANTS
// ================================================================================

const MAX_A = 100;
const MAX_B = 100;


// ================================================================================
//   MODELS
// ================================================================================

class NumberPower {
	constructor(base, power) {
		this.base = base;
		this.power = power;
		
		this.simplify();
	}
	
	/**
	 * if the base number is 'rootable' or 'self-dividable', simplify it. e.g. 4^4 to be 2^8
	 * 
	 * @return {NumberPower} instance of this class
	 */
	simplify() {
		const halfBase = this.base >> 1;
		
		for(let i = 2; i <= halfBase; i++) {
			let base = this.base;
			let addedPower = 1;
			
			if (i * i > base) { return; }
			
			while(base % i === 0) {
				base /= i;
				addedPower++;
				
				if (base === i) {
					this.base = base;
					this.power *= addedPower;
					return;
				}
			}
		}
	}
	
	toString() {
		return JSON.stringify({
			base: this.base,
			power: this.power,
		});
	}
}


// ================================================================================
//   ANSWER
// ================================================================================

const answer = () => {
	const numberPowerSet = [];
	for(let a = 2; a <= MAX_A; a++) {
		for(let b = 2; b <= MAX_B; b++) {
			const numberPower = new NumberPower(a, b);
			const numberPowerString = numberPower.toString();
			if (numberPowerSet.indexOf(numberPowerString) === -1) {
				numberPowerSet.push(numberPowerString);
			}
		}
	}
	return numberPowerSet.length;
};

console.log(answer());
